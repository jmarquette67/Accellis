"""Initial migration to new client scoring schema

Revision ID: 20a1ff2012cd
Revises: 
Create Date: 2025-05-27 16:49:58.329690

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '20a1ff2012cd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('metric',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('weight', sa.Integer(), nullable=False),
    sa.Column('high_threshold', sa.Integer(), nullable=False),
    sa.Column('low_threshold', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'MANAGER', 'VCIO', 'TAM', name='roletype'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('auditlog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_table', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_auditlog_timestamp'), 'auditlog', ['timestamp'], unique=False)
    op.create_table('score',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('metric_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('taken_at', sa.DateTime(), nullable=False),
    sa.Column('locked', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ),
    sa.ForeignKeyConstraint(['metric_id'], ['metric.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_score_taken_at'), 'score', ['taken_at'], unique=False)
    op.create_table('snapshot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('month', sa.Date(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('overall_score', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_snapshot_month'), 'snapshot', ['month'], unique=False)
    op.create_table('userclient',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'client_id')
    )
    op.drop_table('flask_dance_oauth')
    op.drop_table('users')
    op.drop_table('health_check')
    op.drop_table('alert')
    op.add_column('client', sa.Column('industry', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('client', sa.Column('mrr', sa.Integer(), nullable=True))
    op.add_column('client', sa.Column('renewal_date', sa.Date(), nullable=True))
    op.drop_constraint(op.f('client_hostname_key'), 'client', type_='unique')
    op.create_index(op.f('ix_client_name'), 'client', ['name'], unique=False)
    op.drop_column('client', 'description')
    op.drop_column('client', 'ip_address')
    op.drop_column('client', 'is_active')
    op.drop_column('client', 'last_checkin')
    op.drop_column('client', 'hostname')
    op.drop_column('client', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('client', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('client', sa.Column('hostname', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('client', sa.Column('last_checkin', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('client', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('client', sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=False))
    op.add_column('client', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_client_name'), table_name='client')
    op.create_unique_constraint(op.f('client_hostname_key'), 'client', ['hostname'], postgresql_nulls_not_distinct=False)
    op.drop_column('client', 'renewal_date')
    op.drop_column('client', 'mrr')
    op.drop_column('client', 'industry')
    op.create_table('alert',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name=op.f('alert_client_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('alert_pkey'))
    )
    op.create_table('health_check',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('cpu_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('memory_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('disk_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('uptime', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('load_average', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('network_rx', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('network_tx', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name=op.f('health_check_client_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('health_check_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('ADMIN', 'MANAGER', 'VCIO', 'TAM', name='userrole'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('flask_dance_oauth',
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('browser_session_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('token', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('flask_dance_oauth_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('flask_dance_oauth_pkey')),
    sa.UniqueConstraint('user_id', 'browser_session_key', 'provider', name=op.f('uq_user_browser_session_key_provider'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('userclient')
    op.drop_index(op.f('ix_snapshot_month'), table_name='snapshot')
    op.drop_table('snapshot')
    op.drop_index(op.f('ix_score_taken_at'), table_name='score')
    op.drop_table('score')
    op.drop_index(op.f('ix_auditlog_timestamp'), table_name='auditlog')
    op.drop_table('auditlog')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_table('metric')
    # ### end Alembic commands ###
